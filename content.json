{"meta":{"title":"livisun's blog","subtitle":null,"description":null,"author":"livisun","url":"http://livisun.gitgub.io"},"pages":[{"title":"关于我","date":"2019-09-09T02:12:25.000Z","updated":"2019-09-09T05:37:37.519Z","comments":true,"path":"about/index.html","permalink":"http://livisun.gitgub.io/about/index.html","excerpt":"","text":"2017,南京 16年毕业于南京信息工程大学-滨江学院（学院现已脱离本部迁到无锡）,17年2月回南通就职于南通金钥匙科教设备有限公司至今,从事软件开发工作。 网络工程专业，自学软件工程：从.NET桌面应用学到.NET web应用，再由后端到现代前端。目前爱上了前端开发，沉浸在前端百花齐放的开源环境中，相信努力就会有结果。 热爱一切有趣的事物：数学题的第7种解法，新华字典的页脚和迷路的小蚂蚁。 对现有规则持怀疑态度，却一丝不苟的按规则行事，尤其在深夜无人的非机动车路口。 无神论者，只信奉技术的力量，开源拥抱者；尽管认为会使用达到预期的工具就可以，然而还是忍不住想要知道它到底在干些什么。非常讨厌没有报错堆栈的error。 思绪天马行空，不喜欢即时聊天工具，认为手指快不过感觉；与其写了一大段在一个一个回车，索性开始就不写。久而带来的结果就是：除非激起我的兴趣或是挑战到我的世界观，一般只做个聆听者，不参与交流。 喜欢读东西，有趣的书或文章，中西历史，法律医药，育儿两性，动物植物。。。但凡当我看到它，并且刚好有一点兴趣，就把它读一下。观点不尽正确，叙述不一定清晰，意图也不见得明显，但你渐渐发现，当你疑惑的时候，你便能得到自己想要的内容了。 不认为 “耳听为虚和眼见为实”，认为“相由心生”，自我的意识往往具有最大的力量。我相信这个世界鸟语花香，那它便一定是这样。 自以为善良，正能量，真实且简单。"}],"posts":[{"title":"创建VS Code 代码片段","slug":"创建VS-Code-代码片段","date":"2019-09-25T03:19:58.000Z","updated":"2019-09-25T03:57:35.634Z","comments":true,"path":"2019/09/25/创建VS-Code-代码片段/","link":"","permalink":"http://livisun.gitgub.io/2019/09/25/创建VS-Code-代码片段/","excerpt":"","text":"本文只描述在VC Code中创建自己的代码片段，其他编辑器，请自行查阅。 打开VS Code，按F1 打开命令窗口，输入关键字snippet,找到首选项：配置用户代码片段，回车进入； 选择新建全局代码片段文件，例如：my-snippents，默认会在C:\\Users\\Administrator\\AppData\\Roaming\\Code\\User\\snippets文件下，创建my-snippents.code-snippents文件；(注：我们现在创建的是全局的，当然你也可以创建对应语言模式的代码片段，没错就是你刚刚看到的其它选项，点开直接配置就可以，会生成例如vue.json这样的文件，同样也会被保存在这个文件夹中) 在my-snippents文件中，添加你想要配置的代码片段，举个例子，我想要在创建文件时，添加文件相关信息：12345678910111213&#123; &quot;Print to console&quot;: &#123; &quot;prefix&quot;: &quot;author&quot;, &quot;body&quot;: [ &quot; /**&quot; &quot; * @author :livisun (博客地址：https://www.livisun.top)&quot; &quot; * @date :$CURRENT_YEAR年$CURRENT_MONTH月$CURRENT_DATE日 $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND $CURRENT_DAY_NAME&quot; &quot; * @Description :$1&quot; &quot; */&quot; ], &quot;description&quot;: &quot;创建信息&quot; &#125;,&#125; 这样 ，就可以在创建文件时，以author +回车/Tab 快速输出代码片段。 对了，简单介绍一下 snippet的语法规则 123456prefix :代码片段名字，即输入此名字就可以调用代码片段。body :这个是代码段的主体.需要编写的代码放在这里, $1 :生成代码后光标的初始位置.$2 :生成代码后光标的第二个位置,按tab键可进行快速切换,还可以有$3,$4,$5.....$&#123;1,字符&#125; :生成代码后光标的初始位置(其中1表示光标开始的序号，字符表示生成代码后光标会直接选中字符。)description :代码段描述,输入名字后编辑器显示的提示信息。","categories":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}],"tags":[{"name":"vs code","slug":"vs-code","permalink":"http://livisun.gitgub.io/tags/vs-code/"}],"keywords":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}]},{"title":"vue学习路线","slug":"vue学习路线","date":"2019-09-16T13:01:00.000Z","updated":"2019-09-18T07:36:10.611Z","comments":true,"path":"2019/09/16/vue学习路线/","link":"","permalink":"http://livisun.gitgub.io/2019/09/16/vue学习路线/","excerpt":"","text":"转载自知乎-vue作者尤雨溪的建议。原文链接 起步 扎实的 JavaScript / HTML / CSS 基本功。这是前置条件。 通读官方教程 (guide) 的基础篇。不要用任何构建工具，就只用最简单的 ，把教程里的例子模仿一遍，理解用法。不推荐上来就直接用 vue-cli 构建项目，尤其是如果没有 Node/Webpack 基础。 照着官网上的示例，自己想一些类似的例子，模仿着实现来练手，加深理解。 阅读官方教程进阶篇的前半部分，到『自定义指令 (Custom Directive) 』为止。着重理解 Vue 的响应式机制和组件生命周期。『渲染函数（Render Function)』如果理解吃力可以先跳过。 阅读教程里关于路由和状态管理的章节，然后根据需要学习 vue-router 和 vuex。同样的，先不要管构建工具，以跟着文档里的例子理解用法为主。 走完基础文档后，如果你对于基于 Node 的前端工程化不熟悉，就需要补课了。下面这些严格来说并不是 Vue 本身的内容，也不涵盖所有的前端工程化知识，但对于大型的 Vue 工程是前置条件，也是合格的『前端工程师』应当具备的知识。 前端生态/工程化 了解 JavaScript 背后的规范，ECMAScript 的历史和目前的规范制定方式。学习 ES2015/16 的新特性，理解 ES2015 modules，适当关注还未成为标准的提案。 学习命令行的使用。建议用 Mac。 学习 Node.js 基础。建议使用 nvm 这样的工具来管理机器上的 Node 版本，并且将 npm 的 registry 注册表配置为淘宝的镜像源。至少要了解 npm 的常用命令，npm scripts 如何使用，语义化版本号规则，CommonJS 模块规范（了解它和 ES2015 Modules 的异同），Node 包的解析规则，以及 Node 的常用 API。应当做到可以自己写一些基本的命令行程序。注意最新版本的 Node (6+) 已经支持绝大部分 ES2015 的特性，可以借此巩固 ES2015。 了解如何使用 / 配置 Babel 来将 ES2015 编译到 ES5 用于浏览器环境 学习 Webpack。Webpack 是一个极其强大同时也复杂的工具，作为起步，理解它的『一切皆模块』的思想，并基本了解其常用配置选项和 loader 的概念/使用方法即可，比如如何搭配 Webpack 使用 Babel。学习 Webpack 的一个挑战在于其本身文档的混乱，建议多搜索搜索，应该还是有质量不错的第三方教程的。英文好的建议阅读 Webpack 2.0 的文档，比起 1.0 有极大的改善，但需要注意和 1.0 的不兼容之处。 vue进阶 有了 Node 和 Webpack 的基础，可以通过 vue-cli 来搭建基于 Webpack ，并且支持单文件组件的项目了。建议用 webpack-simple 这个模板开始，并阅读官方教程进阶篇剩余的内容以及 vue-loader 的文档，了解一些进阶配置。有兴趣的可以自己亲手从零开始搭一个项目加深理解。 根据 例子 尝试在 Webpack 模板基础上整合 vue-router 和 vuex. 深入理解 Virtual DOM 和『渲染函数 (Render Functions)』这一章节（可选择性使用 JSX)，理解模板和渲染函数之间的对应关系，了解其使用方法和适用场景。 （可选）根据需求，了解服务端渲染的使用（需要配合 Node 服务器开发的知识）。其实更重要的是理解它所解决的问题并搞清楚你是否需要它。 阅读开源的 Vue 应用、组件、插件源码，自己尝试编写开源的 Vue 组件、插件。 参考 贡献指南 阅读 Vue 的源码，理解内部实现细节。（需要了解 Flow） 参与 Vue GitHub issue 的定位 -&gt; 贡献 PR -&gt; 加入核心团队 -&gt; 升任 CTO -&gt; 迎娶白富美…","categories":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://livisun.gitgub.io/tags/vue/"}],"keywords":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}]},{"title":"node自动重启工具——nodemon","slug":"node自动重启工具——nodemon","date":"2019-09-15T13:38:09.000Z","updated":"2019-09-18T07:36:10.610Z","comments":true,"path":"2019/09/15/node自动重启工具——nodemon/","link":"","permalink":"http://livisun.gitgub.io/2019/09/15/node自动重启工具——nodemon/","excerpt":"","text":"现在nodejs作为轻量级的后台，越来越受欢迎，尤其在前端写demo的时候，直接koa框架一来，写几个api就能测试demo了。然而因为是demo，需要频繁修改接口，增加功能，修改代码之后，需要手动close，然后在start，以前觉得nodejs挺方便了，这点小毛病可以克服，直到遇见了nodemon这个工具，舒服~~ 先来介绍一下这个工具：nodemon会在服务启动后，监视源代码的任何更改，当你保存修改过的代码之后，将自动重启。详细资料，请查看官方文档。 使用也很简单： 全局安装 nodemon： 1npm install -g nodemon 编写nodejs 后台，这里使用koa框架(需要安装koa依赖npm install koa) 12345678910// app.jsconst Koa = require(&apos;koa&apos;);const app = new Koa();app.use(async ctx =&gt; &#123; ctx.body = &apos;Hello World&apos;;&#125;);app.listen(3000); 启动 1nodemon app.js 访问 3000端口，可以看到输出 Hello World，现在修改一下代码 123456...app.use(async ctx =&gt; &#123; ctx.body = &apos;Hello Nodemon&apos;;&#125;);... 当我们Ctrl+S 保存代码时，可以看到终端命令行，输出： 12[nodemon] restarting due to changes...[nodemon] starting `node app.js` 刷新浏览器，可以看到页面已经发生了改变，变成“Hello Nodemon” ok，有这个小工具，nodejs开发调试会变得方便一点。","categories":[{"name":"工具","slug":"工具","permalink":"http://livisun.gitgub.io/categories/工具/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://livisun.gitgub.io/tags/node-js/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://livisun.gitgub.io/categories/工具/"}]},{"title":"分享收藏的一些站点","slug":"分享收藏的一些站点","date":"2019-09-09T05:44:28.000Z","updated":"2019-09-23T02:03:56.778Z","comments":true,"path":"2019/09/09/分享收藏的一些站点/","link":"","permalink":"http://livisun.gitgub.io/2019/09/09/分享收藏的一些站点/","excerpt":"","text":"图片压缩工具：tinypng 图标下载/制作： easyicon 表格生成器：tableconvert.com API数据接口：聚合数据 在线作图：ProcessOn 前端demo托管:codePen JSON在线编辑:JSON Editor Online AST在线语法树解析：AST Explorer 免费的数据存储、实时消息、统计分析等一站式云服务：LeanCloud 站点内容搜索：algolia-DocSerach 前端中文文档集合：印记中文 万本书籍，持续学习：WAWO 阿里一站式可视化工作台：飞冰 阮一峰老师教学文档(建设中))：网道 在线英语学习：BBC Leran English 视频聚合搜索：磁力搜","categories":[{"name":"工具","slug":"工具","permalink":"http://livisun.gitgub.io/categories/工具/"}],"tags":[{"name":"实用工具","slug":"实用工具","permalink":"http://livisun.gitgub.io/tags/实用工具/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://livisun.gitgub.io/categories/工具/"}]},{"title":"记本博客搭建过程","slug":"记本博客搭建过程","date":"2019-09-05T07:34:09.000Z","updated":"2019-09-06T08:25:53.725Z","comments":true,"path":"2019/09/05/记本博客搭建过程/","link":"","permalink":"http://livisun.gitgub.io/2019/09/05/记本博客搭建过程/","excerpt":"","text":"最近搞了一个线上文档，参考了vuejs.orgvue中文网站的风格，才知道他们用hexo搭建的，之前我用Jekyll搭的 ，要配置很多环境，感觉不如hexo好用，于是就有了这个新博客。整个博客通过hexo在本地写博客并生成博客页面，然后由hexo-deployer-git插件帮我们把博客内容推送到git仓库，由git page 来托管这些静态文件。废话不多说，我们直接开始搭建过程。 1 准备工作 win7用户，按顺序搞就完了，假如因为系统环境或者node版本什么的导致下列哪个安装失败了，请自行百度或者访问官网解决，我们这里认为都是直接成功的。 安装node环境;我记得很久之前在简书上写过一篇，写的有点啰嗦，你只要安装一下就行,版本管理啥的，直接跳过。传送 一个github账号;没有赶紧去注册 要是搞不定，点我 安装hexo;1$ npm install -g hexo-cli 2 创建git仓库 打开你的git仓库，新建一个仓库，注意仓库名称一定是 username.github.io 其中username是你的github用户名。如图所示 这是github page的托管站点创建规则。不信？你可以不按这个规则试一试，这是官方说明。 这样，未来我们博客搭建完成并托管在github page之后，就可以通过username.github.io来访问。当然你要是觉得这个域名有点low，不符合你高大威猛的形象。别担心，github也是充分体谅有自己个性域名的小伙伴的。 2.1 绑定自定义域名在域名控制台，例如阿里云的域名管理界面，找到域名解析设置，分别设置A(将域名指向一个IPV4地址)和CNAME(将域名指向另一个域名)类型。 这里有几点需要额外说明一下： A类型解析 是指向一个ipv4地址的，也就是说需要我们github page的ip地址，我们需要先ping 一下得到这个地址。 CNAME类型解析，需要我们在github项目根目录存在一个CNAME文件(无后缀)，里面填写你绑定的这个新域名(我们在后面hexo博客搭建时候来配置)。配置完成之后，我们可以看到在项目的settings中 github pages 的 自定义域名这里自动绑定了。当然你直接在这边修改我记得好像也是可以的，嘻嘻。 在你绑定了新域名之后，原来的username.github.io并不是就失效了，而是会跳转到你新绑定的域名。 3 使用hexo搭建博客 在准备工作阶段，我们已经安装了hexo了(这里插个嘴，我在家里用win10 安装hexo-cli之后，发现并不能执行hexo指令，在全局安装之后，还要把它你的全局node_modules路径配置到系统环境变量中去)，接下来我们开始创建博客。 3.1 创建博客找个好地方，执行以下命令，hexo-cli 会在这个文件内创建hexo的脚手架环境。 1$ hexo init &lt;folder&gt; 这里的&lt;floder&gt; 表示你想要创建的博客项目的名称，比如我就直接 hex init myblog。 小提示，按照官方文档，在执行玩init初始化执行后，还需要运行npm install来安装依赖，但实际情况据我观察，好像并不需要。跟踪一下这个初始化执行：从github上克隆hexo项目到本地，然后把相关git配置删除，并且完成了安装依赖的过程，直接运行下面指令，运行一个本地服务，默认地址为http://localhost:4000，就可以看到默认的博客页面了。 1$ hexo server //可以简写成 hexo s 3.2 配置相关文件我们看一下文件目录，大概说一下吧 1234567.├── _config.yml //博客站点的配置文件，绝大部门配置都在这里完成├── package.json //这个就不多说了，nodejs模块的描述文件├── scaffolds //这是以后用hexo 指令来创建文件时的Front-matter模板├── source //这个真不说了| └── _posts //在这里面的文件.md和.html，将来会被解析到public文件夹发布出去└── themes //站点的主题，hexo会根据这个文件内容来生成和解析 这里看一下_config.yml文件的配置，可以看我下面的备注，也可以自行访问官方文档： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: livisun&apos;s blog //这里是站点的title，将来浏览器tab标签栏显示的subtitle: // 网站副标题，没啥用description: //网站描述 ，用于SEO，给浏览器爬虫抓取的keywords: //关键字 ，同上author: livisun //作者language: zh-CN //网站使用的语言，timezone: //网站时区，不知道干啥的，都可以不填，应该会有默认的，下面//没必要改的我就不写备注了# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://livisun.gitgub.io //未来站点的网址root: / //网址的根目录 permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: snippet //这里表示hexo选择的主题，在themes文件下，有一个默认主题，我们这边用了更换了，后面我们会说明一下主题的更换# Deployment## Docs: https://hexo.io/docs/deployment.html//这边需要说明一下 ，这是hexo的部署配置，deploy: type: git //表示通过git工具来部署 repository: https://github.com/livisun/livisun.github.io.git //部署到这个仓 //库，也就是我们开始创建的那个仓库 branch: master //默认的master分支 4 更换主题 你会发现你刚刚运行的博客跟本博客比起来是不是有点丑，没问题，安排~。官方提供了一个很方便的主题更换机制，我们可以看到在上面的_config.yml配置中有主题配置项，实际操作只需要下载（大佬可以自己制作）一个主题文件，放在themes文件下，然后到配置文件中，替换一下就可以了。官方怕我们找不到这样的主题，做又做不出来，很贴心的搞了一个主题分享站点，我们可以去淘一个喜欢的主题，甚至你要是看上了好几个，你还可以做到主题的切换，这里是传送门。哦对了，当前主题在本博客页脚处，可以自行获取。算了，来，坐车。 我为什么会选这个主题呢，因为这个主题简约但不简单，个人不是很能接受那种花哨的页面，主要内容要绕一大圈去找，去猜, 玩捉迷藏呢。这个就很好，功能强大，主次分明。 按照snippent主题官方仓库的介绍，有以下特点: 原生JavaScript实现，去jQuery化 样式支持CSS预处理器Less，方便主题自定义 文章过期提醒功能 文章阅读进度条 网站公告功能 首页图片懒加载 首页文章缩略图自动检索文章内图片，支持自动随机图片 主题支持响应式 支持3D云标签 支持文章推送和文章打赏 站内本地搜索和谷歌搜索 支持多个第三方评论系统 支持网站统计和不蒜子访客统计 移动端的简洁设计 支持代码高亮并支持自定义高亮样式 支持Shell脚本通过Travis CI自动化部署Hexo博客 支持Hexo自动化部署结果发送邮件和实时推送到钉钉 嗯，看上去很6的样子，有些功能对我来说不来必要，但是可以看出作者还是很用心的，并且这个主题库一直在保持更新，最近一次提交在21天之前，感兴趣的可以深入了解一下，我们这里只简单介绍一下本博客的配置: 4.1 snippet主题下载snippet获取可以通过两种方式： 下载snippet主题的zip文件，解压后放在themes目录下，和默认landscape为同级目录 在hexo博客根目录，例如我的在myblog执行：1$ git clone git://github.com/shenliyang/hexo-theme-snippet.git themes/hexo-theme-snippet 4.2 安装主题插件因为 hexo-theme-snippet 使用了 ejs 模版引擎 、 Less CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件： 1$ npm i hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S 4.3主题配置 下面就是主题的配置，关系到未来hexo如何解析我们写的文章，并配置主题所提供的其他功能，废话太多了，我们开始，当然你也可以在阅读主题的官方文档，因为也许之后该主题会出更多新功能或其他重大更新，当然你要是觉得这样挺好，跟我来就行。 snippet主题同样有一个——config.yml文件，这就是主题的配置文件了，同样我们贴一下配置，并注释。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265# ---------------------------------------------------------------# Site Information And Theme Configuration Settings# language: zh-CN# ---------------------------------------------------------------## menu // 导航菜单显示&#123;[@page:名字,@url:地址,@icon:图标]&#125;menu:- page: home url: / icon:- page: 编程 url: /categories/编程/ icon:- page: 阅读 url: /categories/阅读/ icon:- page: 随笔 url: /archives/随笔 icon:- page: 工具 url: /categories/工具/ icon:- page: 时间轴 url: /archives/ icon:- page: 关于我 url: /about/ icon:## favicon -- 网站图标位置&#123;@favicon&#125;favicon: /favicon.ico## Feedrss: /atom.xml# ## Carousel# carousel:# img: &apos;./img/head-img.jpg&apos;# url: &apos;https://promotion.aliyun.com/ntms/act/qwbk.html?userCode=xs0pypd2&apos;# 各个小工具的设置//这里是右侧6个左边小工具## widgetswidgets: - search - notification - social - category - archive - tagcloud - friends## 搜索jsonContent: //配置那些目录支持站点搜索 searchLocal: true // 是否启用本地搜索 searchGoogle: false //是否启用谷歌搜索 posts: title: true text: true content: true categories: true tags: true## 网站公告设置 支持 html 和 纯文本notification: |- &lt;p&gt; &lt;a href=&quot;https://ustbhuangyi.github.io/vue-analysis&quot; target=&quot;_blank&quot; &gt;Vue源码学习&lt;/a&gt; &lt;br/&gt; &lt;a href=&quot;https://blog.just4fun.site/Scratch3_api_analysis.html&quot; target=&quot;_blank&quot;&gt;scratch3 源码分析&lt;/a&gt; &lt;br/&gt; &lt;/p&gt;## 社交设置 &#123;@name:社交工具名字，@icon:社交工具图标，@href:设置工具链接&#125; [参考图标]//(http://fontawesome.io/icons/)social: - name: Github icon: git href: //github.com/livisun - name: 邮箱 icon: envelope-o href: mailto:1105432766@qq.com - name: 联系QQ icon: qq href: tencent://message/?uin=1105432766 - name: 微信 icon: weixin href: / - name: QQ群 icon: users href: / - name: RSS icon: feed href: /atom.xml## 文章分类设置 cate_config: show_count: true //是否显示数字 show_current: true //是否高亮当前分类## 文章归档设置arch_config: type: &apos;monthly&apos; format: &apos;YYYY年MM月&apos; show_count: true order: -1## 标签云设置tagcloud: tag3d: false // 是否启用3D标签云 textColour: &apos;#444&apos; //字体颜色 outlineMethod: &apos;block&apos; // 选中模式(outline|classic|block|colour|size|none) outlineColour: &apos;#FFDAB9&apos;// 选中模式的颜色 interval: 30 //动画帧之间的时间间隔，值越大，转动幅度越大 freezeActive: true //选中的标签是否继续滚动 frontSelect: true //不选标签云后部的标签 reverse: true //是否反向触发 wheelZoom: false //是否启用鼠标滚轮## 友链设置links: - Hexo官网: https://hexo.io/zh-cn/# 主题自定义个性化配置## 网站宣传语branding: 读有趣的书，写简单的代码。## 设置banner背景图片 //支持动态背景banner: img: http://snippet.shenliyang.com/img/banner.jpg## 首页列表底部面板homePanel: true## 缩略图自定义随机图片defaultImgs: -## 截取文章首页描述字数//自定截图内容摘要，支持自定义摘要，//自定义摘要&#123;@&lt;!--more--&gt;:截取more之前的内容为摘要&#125;excerptLength: 120## 是否开启文章目录toc: true## 代码高亮配置highlightTheme:## bootstrap配置bootstrap:## ICON配置fontAwesome:## 文章过期提醒功能warning: days: 300 text: &apos;本文于%d天之前发表，文中内容可能已经过时。&apos;## 文章内声明declaration: enable: true title: &apos;转载声明&apos; tip: |- 商业转载请联系作者获得授权,非商业转载请注明出处 © &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;livisun&lt;/a&gt;## 文章打赏reward: alipay: &apos;/img/zfb.png&apos; wepay: &apos; /img/wx.png&apos; tip: 假如你刚好有兴趣请我喝杯奶茶## 主题评论//这里我们用的Valine评论，支持其他评论，自行探索## Valine评论valine: enable: true appId: PFF3iz6l46WOQXhWBVPX22um-gzGzoHsz //自己去注册 appKey: aQNed97fCoI0PTI26eDHdtBe placeholder: 说点什么吧 notify: false // 邮件通知 verify: true // 验证码 avatar: mm // avatar头像 meta: nick,mail // 输入框内容，可选值nick,mail,link pageSize: 10### 畅言评论(需要ICP备案)changyan: enable: false appid: conf:### 来必力livere: enable: false livere_uid: MTAyMC8zMzA1MS85NjEz## Gitalk评论gitalk: enable: false clientID: clientSecret: repo: owner: admin: perPage: distractionFreeMode: true### Disqus评论disqus: enable: false shortname: snippet count: false### gitment评论(长期不更新，不建议使用)gitment: enable: false owner: repo: client_id: client_secret: perPage: 10### 友言评论(服务不稳定)uyan: enable: false uyan_id: 1966422## 网站访客统计//本博客未开启访客统计visit_counter: site: false page: false## 网站访问统计分析### 网盟CNZZ统计cnzz_analytics:### 百度统计baidu_analytics:### 谷歌统计google_analytics:### 腾讯分析tencent_analytics:### 百度站点认证baidu_site_verification:### 百度自动推送baidu_push: true#网站主题配置since: 2019 //建站时间robot: &apos;all&apos; // 控制搜索引擎的抓取和索引编制行为，默认为allversion: 1.2.1 //主题版本 另外需要提醒的一点是，如果要使用站点搜索，必须安装插件hexo-generator-json-content 来创建本地搜索需要的json文件 1$ npm i hexo-generator-json-content@2.2.0 -S ok主题配置基本就到这，当然页面的模板你可以自定义，修改`layout`文件夹内的模板，这里就不再赘述。 5 将博客部署到github page 我们回顾一下之前的配置，与部署相关的有两个地方: 在绑定自定义域名时候，我们提到了CNAME文件，对了，在部署之前需要，在hexo的source文件下创建一个无后缀名的CNAME文件，并在里面写入你的绑定域名 在hexo的_config.yml文件中，配置了我们将来hexo部署的仓库 接下来还需要安装一个部署插件，执行以下命令： 1$ npm install hexo-deployer-git --save ok,下载我们执行部署命令： 1$ hexo g -d 咔咔一顿运行，之后，我们得到返回：Deploy done：git,表示部署成功，快去看看吧。 hexo 常见命令： 1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写命令 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 当然，也可使用组合命令，就像上面的部署操作一样。 12hexo s -g #生成并本地预览hexo d -g #生成并上传 到这为止，整个博客就搭完了，竟然写了这么久，后面如何写博客，自行参考，官网，或者在下面留言吧，先溜了。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://livisun.gitgub.io/categories/随笔/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://livisun.gitgub.io/tags/hexo/"}],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://livisun.gitgub.io/categories/随笔/"}]},{"title":"快速删除node_modules文件夹","slug":"快速删除node-modules文件夹","date":"2019-09-05T07:19:34.000Z","updated":"2019-09-05T07:21:05.440Z","comments":true,"path":"2019/09/05/快速删除node-modules文件夹/","link":"","permalink":"http://livisun.gitgub.io/2019/09/05/快速删除node-modules文件夹/","excerpt":"","text":"现在前端框架经常会用到npm包管理器来管理依赖，但是很多包更新非常频繁，导致不兼容问题，又或者自己引入了一些包,后面又不用了，又或者某个包出了问题，总之导致项目运行有一点问题，我就想把node_modules包删掉，重新执行 npm install 但是这个文件夹删除非常慢，还偶尔告诉我删除失败，不得不手动从最里层删不掉的文件夹一个一个删掉，坑爹。 后来找到一个神器，rimraf 首先 全局安装rimraf 1npm install rimraf -g 然后进入node_moduless所在文件夹 执行指令 1rimraf node_modules 是不是很快。","categories":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"http://livisun.gitgub.io/tags/小技巧/"}],"keywords":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}]},{"title":"axios的post请求问题","slug":"axios的post请求问题","date":"2019-08-21T11:58:30.000Z","updated":"2019-09-05T07:07:27.132Z","comments":true,"path":"2019/08/21/axios的post请求问题/","link":"","permalink":"http://livisun.gitgub.io/2019/08/21/axios的post请求问题/","excerpt":"","text":"最近在学习和实践Vue，搭建了vue+koa的前后端分离架构。vue请求采用的axios。但是遇到一个天坑，axios的post请求，后端接收不到参数。request.body中得到的是 ‘{‘param’:param}:’这种把参数全部变成key ，但是value没有值。百度发现这是axios 中一段关键代码引起的，具体是什么代码没去考证，我就纳闷了，这么久了都没有解决，还是说我过去的传参方式已经被淘汰了？ 先不管，我们先来解决问题。网上有6中解决方案，我参考了一下，在axios的requet请求拦截器中，添加通过qs转换一下 12345678910111213141516//http request 请求拦截器axios.interceptors.request.use( config =&gt; &#123; config.data = qs.stringify(config.data); config.headers = &#123; &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos; &#125; if(store.state.token)&#123; axios.defaults.headers.common[&apos;Authorization&apos;] = store.state.token &#125; return config; &#125;, error =&gt; &#123; return Promise.reject(err); &#125; ); ok 问题解决 后端 直接通过 koa-bodyparser 自动解析 1234567const app = new Koa();const bodyparser = require(&apos;koa-bodyparser&apos;)app.use(bodyparser()) router.post(&apos;/addBanner&apos;,async(ctx,next)=&gt;&#123; ctx.body=ctx.request.body &#125;)","categories":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}],"tags":[{"name":"axios","slug":"axios","permalink":"http://livisun.gitgub.io/tags/axios/"}],"keywords":[{"name":"编程","slug":"编程","permalink":"http://livisun.gitgub.io/categories/编程/"}]}]}